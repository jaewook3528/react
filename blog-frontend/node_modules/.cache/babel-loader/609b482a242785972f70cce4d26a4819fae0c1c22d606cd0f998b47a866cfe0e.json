{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport produce from 'immer';\nimport * as commentsAPI from '../lib/api/comments';\nimport { takeLatest } from 'redux-saga/effects';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nconst INITIALIZE = 'comment/INITIALIZE';\nconst CHANGE_FIELD = 'comment/CHANGE_FIELD';\nconst [WRITE_COMMENT, WRITE_COMMENT_SUCCESS, WRITE_COMMENT_FAILURE] = createRequestActionTypes('comment/WRITE_COMMENT');\nconst SET_ERROR = 'comment/SET_ERROR';\nconst SET_COMMENT = 'comment/SET_COMMENT';\nexport const initialize = createAction(INITIALIZE);\nexport const changeField = createAction(CHANGE_FIELD, _ref => {\n  let {\n    key,\n    value\n  } = _ref;\n  return {\n    key,\n    value\n  };\n});\nexport const writeComment = createAction(WRITE_COMMENT, _ref2 => {\n  let {\n    postId,\n    contents\n  } = _ref2;\n  return {\n    postId,\n    contents\n  };\n});\nexport const setError = createAction(SET_ERROR, error => error);\nexport const setComment = createAction(SET_COMMENT, comment => comment);\nconst writeCommentSaga = createRequestSaga(WRITE_COMMENT, commentsAPI.writeComment);\nexport function* commentSaga() {\n  yield takeLatest(WRITE_COMMENT, writeCommentSaga);\n}\nconst initialState = {\n  comment: null,\n  contents: '',\n  error: null\n};\nconst comment = handleActions({\n  [INITIALIZE]: () => initialState,\n  [CHANGE_FIELD]: (state, _ref3) => {\n    let {\n      payload: {\n        key,\n        value\n      }\n    } = _ref3;\n    return produce(state, draft => {\n      draft[key] = value;\n    });\n  },\n  [WRITE_COMMENT_SUCCESS]: (state, _ref4) => {\n    let {\n      payload: comment\n    } = _ref4;\n    return {\n      ...state,\n      comment,\n      error: null\n    };\n  },\n  [WRITE_COMMENT_FAILURE]: (state, _ref5) => {\n    let {\n      payload: error\n    } = _ref5;\n    return {\n      ...state,\n      error\n    };\n  },\n  [SET_ERROR]: (state, _ref6) => {\n    let {\n      payload: error\n    } = _ref6;\n    return {\n      ...state,\n      error\n    };\n  },\n  [SET_COMMENT]: (state, _ref7) => {\n    let {\n      payload: comment\n    } = _ref7;\n    return {\n      ...state,\n      comment\n    };\n  }\n}, initialState);\nexport default comment;","map":{"version":3,"names":["createAction","handleActions","produce","commentsAPI","takeLatest","createRequestSaga","createRequestActionTypes","INITIALIZE","CHANGE_FIELD","WRITE_COMMENT","WRITE_COMMENT_SUCCESS","WRITE_COMMENT_FAILURE","SET_ERROR","SET_COMMENT","initialize","changeField","_ref","key","value","writeComment","_ref2","postId","contents","setError","error","setComment","comment","writeCommentSaga","commentSaga","initialState","state","_ref3","payload","draft","_ref4","_ref5","_ref6","_ref7"],"sources":["C:/react/git/react/blog-frontend/src/modules/comment.js"],"sourcesContent":["import { createAction, handleActions } from 'redux-actions';\r\nimport produce from 'immer';\r\nimport * as commentsAPI from '../lib/api/comments';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\n\r\nconst INITIALIZE = 'comment/INITIALIZE';\r\nconst CHANGE_FIELD = 'comment/CHANGE_FIELD';\r\nconst [\r\n  WRITE_COMMENT,\r\n  WRITE_COMMENT_SUCCESS,\r\n  WRITE_COMMENT_FAILURE,\r\n] = createRequestActionTypes('comment/WRITE_COMMENT');\r\nconst SET_ERROR = 'comment/SET_ERROR';\r\nconst SET_COMMENT = 'comment/SET_COMMENT';\r\n\r\nexport const initialize = createAction(INITIALIZE);\r\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\r\n  key,\r\n  value,\r\n}));\r\nexport const writeComment = createAction(WRITE_COMMENT, ({ postId, contents }) => ({\r\n  postId,\r\n  contents,\r\n}));\r\nexport const setError = createAction(SET_ERROR, error => error);\r\nexport const setComment = createAction(SET_COMMENT, comment => comment);\r\n\r\nconst writeCommentSaga = createRequestSaga(WRITE_COMMENT, commentsAPI.writeComment);\r\n\r\nexport function* commentSaga() {\r\n  yield takeLatest(WRITE_COMMENT, writeCommentSaga);\r\n}\r\n\r\nconst initialState = {\r\n  comment: null,\r\n  contents: '',\r\n  error: null,\r\n};\r\n\r\nconst comment = handleActions(\r\n  {\r\n    [INITIALIZE]: () => initialState,\r\n    [CHANGE_FIELD]: (state, { payload: { key, value } }) =>\r\n      produce(state, draft => {\r\n        draft[key] = value;\r\n      }),\r\n    [WRITE_COMMENT_SUCCESS]: (state, { payload: comment }) => ({\r\n      ...state,\r\n      comment,\r\n      error: null,\r\n    }),\r\n    [WRITE_COMMENT_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    [SET_ERROR]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    [SET_COMMENT]: (state, { payload: comment }) => ({\r\n      ...state,\r\n      comment,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default comment;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}