{"ast":null,"code":"var _jsxFileName = \"C:\\\\react\\\\git\\\\react\\\\blog-frontend\\\\src\\\\containers\\\\post\\\\PostViewerContainer.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { readPost, unloadPost } from '../../modules/post';\nimport PostViewer from '../../components/post/PostViewer';\nimport PostActionButtons from '../../components/post/PostActionButtons';\nimport { setOriginalPost } from '../../modules/write';\nconst PostViewerContainer = _ref => {\n  _s();\n  let {\n    match,\n    history\n  } = _ref;\n  // 처음 마운트될 때 포스트 읽기 API 요청\n  const {\n    postId\n  } = match.params;\n  const dispatch = useDispatch();\n  const {\n    post,\n    error,\n    loading,\n    user\n  } = useSelector(_ref2 => {\n    let {\n      post,\n      loading,\n      user\n    } = _ref2;\n    return {\n      post: post.post,\n      error: post.error,\n      loading: loading['post/READ_POST'],\n      user: user.user\n    };\n  });\n  useEffect(() => {\n    dispatch(readPost(postId));\n    // 언마운트될 때 리덕스에서 포스트 데이터 없애기\n    return () => {\n      dispatch(unloadPost());\n    };\n  }, [dispatch, postId]);\n  return /*#__PURE__*/React.createElement(PostViewer, {\n    post: post,\n    loading: loading,\n    error: error,\n    actionButtons: /*#__PURE__*/React.createElement(PostActionButtons, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 22\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  });\n};\n_s(PostViewerContainer, \"8imklwgC4Ku3P3NzC5mQUApv5Hw=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = PostViewerContainer;\nexport default _c2 = withRouter(PostViewerContainer);\nvar _c, _c2;\n$RefreshReg$(_c, \"PostViewerContainer\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useEffect","useDispatch","useSelector","withRouter","readPost","unloadPost","PostViewer","PostActionButtons","setOriginalPost","PostViewerContainer","_ref","_s","match","history","postId","params","dispatch","post","error","loading","user","_ref2","createElement","actionButtons","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","_c","_c2","$RefreshReg$"],"sources":["C:/react/git/react/blog-frontend/src/containers/post/PostViewerContainer.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { readPost, unloadPost } from '../../modules/post';\r\nimport PostViewer from '../../components/post/PostViewer';\r\nimport PostActionButtons from '../../components/post/PostActionButtons';\r\nimport { setOriginalPost } from '../../modules/write';\r\n\r\nconst PostViewerContainer = ({ match, history }) => {\r\n  // 처음 마운트될 때 포스트 읽기 API 요청\r\n  const { postId } = match.params;\r\n  const dispatch = useDispatch();\r\n  const { post, error, loading, user } = useSelector(({ post, loading, user }) => ({\r\n    post: post.post,\r\n    error: post.error,\r\n    loading: loading['post/READ_POST'],\r\n    user: user.user,\r\n}));\r\n\r\n  useEffect(() => {\r\n    dispatch(readPost(postId));\r\n    // 언마운트될 때 리덕스에서 포스트 데이터 없애기\r\n    return () => {\r\n      dispatch(unloadPost());\r\n    };\r\n  }, [dispatch, postId]);\r\n\r\n  return (\r\n    <PostViewer\r\n      post={post}\r\n      loading={loading}\r\n      error={error}\r\n      actionButtons={<PostActionButtons />}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(PostViewerContainer);"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,QAAQ,EAAEC,UAAU,QAAQ,oBAAoB;AACzD,OAAOC,UAAU,MAAM,kCAAkC;AACzD,OAAOC,iBAAiB,MAAM,yCAAyC;AACvE,SAASC,eAAe,QAAQ,qBAAqB;AAErD,MAAMC,mBAAmB,GAAGC,IAAA,IAAwB;EAAAC,EAAA;EAAA,IAAvB;IAAEC,KAAK;IAAEC;EAAQ,CAAC,GAAAH,IAAA;EAC7C;EACA,MAAM;IAAEI;EAAO,CAAC,GAAGF,KAAK,CAACG,MAAM;EAC/B,MAAMC,QAAQ,GAAGf,WAAW,EAAE;EAC9B,MAAM;IAAEgB,IAAI;IAAEC,KAAK;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGlB,WAAW,CAACmB,KAAA;IAAA,IAAC;MAAEJ,IAAI;MAAEE,OAAO;MAAEC;IAAK,CAAC,GAAAC,KAAA;IAAA,OAAM;MAC/EJ,IAAI,EAAEA,IAAI,CAACA,IAAI;MACfC,KAAK,EAAED,IAAI,CAACC,KAAK;MACjBC,OAAO,EAAEA,OAAO,CAAC,gBAAgB,CAAC;MAClCC,IAAI,EAAEA,IAAI,CAACA;IACf,CAAC;EAAA,CAAC,CAAC;EAEDpB,SAAS,CAAC,MAAM;IACdgB,QAAQ,CAACZ,QAAQ,CAACU,MAAM,CAAC,CAAC;IAC1B;IACA,OAAO,MAAM;MACXE,QAAQ,CAACX,UAAU,EAAE,CAAC;IACxB,CAAC;EACH,CAAC,EAAE,CAACW,QAAQ,EAAEF,MAAM,CAAC,CAAC;EAEtB,oBACEf,KAAA,CAAAuB,aAAA,CAAChB,UAAU;IACTW,IAAI,EAAEA,IAAK;IACXE,OAAO,EAAEA,OAAQ;IACjBD,KAAK,EAAEA,KAAM;IACbK,aAAa,eAAExB,KAAA,CAAAuB,aAAA,CAACf,iBAAiB;MAAAiB,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,EAAI;IAAAL,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,EACrC;AAEN,CAAC;AAAClB,EAAA,CA3BIF,mBAAmB;EAAA,QAGNR,WAAW,EACWC,WAAW;AAAA;AAAA4B,EAAA,GAJ9CrB,mBAAmB;AA6BzB,eAAAsB,GAAA,GAAe5B,UAAU,CAACM,mBAAmB,CAAC;AAAC,IAAAqB,EAAA,EAAAC,GAAA;AAAAC,YAAA,CAAAF,EAAA;AAAAE,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}