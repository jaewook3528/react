{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\nconst INITIALIZE = 'write/INITIALIZE'; // 모든 내용 초기화\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; // 특정 key 값 바꾸기\nconst [WRITE_POST, WRITE_POST_SUCCESS, WRITE_POST_FAILURE] = createRequestActionTypes('write/WRITE_POST'); // 포스트 작성\n\nexport const initialize = createAction(INITIALIZE);\nexport const changeField = createAction(CHANGE_FIELD, _ref => {\n  let {\n    key,\n    value\n  } = _ref;\n  return {\n    key,\n    value\n  };\n});\nexport const writePost = createAction(WRITE_POST, _ref2 => {\n  let {\n    title,\n    body,\n    tags\n  } = _ref2;\n  return {\n    title,\n    body,\n    tags\n  };\n});\n\n// 사가 생성\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost);\nexport function* writeSaga() {\n  yield takeLatest(WRITE_POST, writePostSaga);\n}\nconst initialState = {\n  title: '',\n  body: '',\n  tags: [],\n  post: null,\n  postError: null\n};\nconst write = handleActions({\n  [INITIALIZE]: state => initialState,\n  // initialState를 넣으면 초기 상태로 바뀜\n  [CHANGE_FIELD]: (state, _ref3) => {\n    let {\n      payload: {\n        key,\n        value\n      }\n    } = _ref3;\n    return {\n      ...state,\n      [key]: value // 특정 key 값을 업데이트\n    };\n  },\n\n  [WRITE_POST]: state => ({\n    ...state,\n    // post와 postError를 초기화\n    post: null,\n    postError: null\n  }),\n  // 포스트 작성 성공\n  [WRITE_POST_SUCCESS]: (state, _ref4) => {\n    let {\n      payload: post\n    } = _ref4;\n    return {\n      ...state,\n      post\n    };\n  },\n  // 포스트 작성 실패\n  [WRITE_POST_FAILURE]: (state, _ref5) => {\n    let {\n      payload: postError\n    } = _ref5;\n    return {\n      ...state,\n      postError\n    };\n  }\n}, initialState);\nexport default write;","map":{"version":3,"names":["createAction","handleActions","createRequestSaga","createRequestActionTypes","postsAPI","takeLatest","INITIALIZE","CHANGE_FIELD","WRITE_POST","WRITE_POST_SUCCESS","WRITE_POST_FAILURE","initialize","changeField","_ref","key","value","writePost","_ref2","title","body","tags","writePostSaga","writeSaga","initialState","post","postError","write","state","_ref3","payload","_ref4","_ref5"],"sources":["C:/node/project/react/blog-frontend/src/modules/write.js"],"sourcesContent":["import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as postsAPI from '../lib/api/posts';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\nconst INITIALIZE = 'write/INITIALIZE'; // 모든 내용 초기화\r\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; // 특정 key 값 바꾸기\r\nconst [\r\n  WRITE_POST,\r\n  WRITE_POST_SUCCESS,\r\n  WRITE_POST_FAILURE,\r\n] = createRequestActionTypes('write/WRITE_POST'); // 포스트 작성\r\n\r\nexport const initialize = createAction(INITIALIZE);\r\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\r\n  key,\r\n  value,\r\n}));\r\nexport const writePost = createAction(WRITE_POST, ({ title, body, tags }) => ({\r\n  title,\r\n  body,\r\n  tags,\r\n}));\r\n\r\n// 사가 생성\r\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost);\r\nexport function* writeSaga() {\r\n  yield takeLatest(WRITE_POST, writePostSaga);\r\n}\r\n\r\nconst initialState = {\r\n  title: '',\r\n  body: '',\r\n  tags: [],\r\n  post: null,\r\n  postError: null,\r\n};\r\n\r\nconst write = handleActions(\r\n  {\r\n    [INITIALIZE]: state => initialState, // initialState를 넣으면 초기 상태로 바뀜\r\n    [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\r\n      ...state,\r\n      [key]: value, // 특정 key 값을 업데이트\r\n    }),\r\n    [WRITE_POST]: state => ({\r\n      ...state,\r\n      // post와 postError를 초기화\r\n      post: null,\r\n      postError: null,\r\n    }),\r\n    // 포스트 작성 성공\r\n    [WRITE_POST_SUCCESS]: (state, { payload: post }) => ({\r\n      ...state,\r\n      post,\r\n    }),\r\n    // 포스트 작성 실패\r\n    [WRITE_POST_FAILURE]: (state, { payload: postError }) => ({\r\n      ...state,\r\n      postError,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default write;"],"mappings":"AAAA,SAASA,YAAY,EAAEC,aAAa,QAAQ,eAAe;AAC3D,OAAOC,iBAAiB,IACtBC,wBAAwB,QACnB,0BAA0B;AACjC,OAAO,KAAKC,QAAQ,MAAM,kBAAkB;AAC5C,SAASC,UAAU,QAAQ,oBAAoB;AAE/C,MAAMC,UAAU,GAAG,kBAAkB,CAAC,CAAC;AACvC,MAAMC,YAAY,GAAG,oBAAoB,CAAC,CAAC;AAC3C,MAAM,CACJC,UAAU,EACVC,kBAAkB,EAClBC,kBAAkB,CACnB,GAAGP,wBAAwB,CAAC,kBAAkB,CAAC,CAAC,CAAC;;AAElD,OAAO,MAAMQ,UAAU,GAAGX,YAAY,CAACM,UAAU,CAAC;AAClD,OAAO,MAAMM,WAAW,GAAGZ,YAAY,CAACO,YAAY,EAAEM,IAAA;EAAA,IAAC;IAAEC,GAAG;IAAEC;EAAM,CAAC,GAAAF,IAAA;EAAA,OAAM;IACzEC,GAAG;IACHC;EACF,CAAC;AAAA,CAAC,CAAC;AACH,OAAO,MAAMC,SAAS,GAAGhB,YAAY,CAACQ,UAAU,EAAES,KAAA;EAAA,IAAC;IAAEC,KAAK;IAAEC,IAAI;IAAEC;EAAK,CAAC,GAAAH,KAAA;EAAA,OAAM;IAC5EC,KAAK;IACLC,IAAI;IACJC;EACF,CAAC;AAAA,CAAC,CAAC;;AAEH;AACA,MAAMC,aAAa,GAAGnB,iBAAiB,CAACM,UAAU,EAAEJ,QAAQ,CAACY,SAAS,CAAC;AACvE,OAAO,UAAUM,SAASA,CAAA,EAAG;EAC3B,MAAMjB,UAAU,CAACG,UAAU,EAAEa,aAAa,CAAC;AAC7C;AAEA,MAAME,YAAY,GAAG;EACnBL,KAAK,EAAE,EAAE;EACTC,IAAI,EAAE,EAAE;EACRC,IAAI,EAAE,EAAE;EACRI,IAAI,EAAE,IAAI;EACVC,SAAS,EAAE;AACb,CAAC;AAED,MAAMC,KAAK,GAAGzB,aAAa,CACzB;EACE,CAACK,UAAU,GAAGqB,KAAK,IAAIJ,YAAY;EAAE;EACrC,CAAChB,YAAY,GAAG,CAACoB,KAAK,EAAAC,KAAA;IAAA,IAAE;MAAEC,OAAO,EAAE;QAAEf,GAAG;QAAEC;MAAM;IAAE,CAAC,GAAAa,KAAA;IAAA,OAAM;MACvD,GAAGD,KAAK;MACR,CAACb,GAAG,GAAGC,KAAK,CAAE;IAChB,CAAC;EAAA,CAAC;;EACF,CAACP,UAAU,GAAGmB,KAAK,KAAK;IACtB,GAAGA,KAAK;IACR;IACAH,IAAI,EAAE,IAAI;IACVC,SAAS,EAAE;EACb,CAAC,CAAC;EACF;EACA,CAAChB,kBAAkB,GAAG,CAACkB,KAAK,EAAAG,KAAA;IAAA,IAAE;MAAED,OAAO,EAAEL;IAAK,CAAC,GAAAM,KAAA;IAAA,OAAM;MACnD,GAAGH,KAAK;MACRH;IACF,CAAC;EAAA,CAAC;EACF;EACA,CAACd,kBAAkB,GAAG,CAACiB,KAAK,EAAAI,KAAA;IAAA,IAAE;MAAEF,OAAO,EAAEJ;IAAU,CAAC,GAAAM,KAAA;IAAA,OAAM;MACxD,GAAGJ,KAAK;MACRF;IACF,CAAC;EAAA;AACH,CAAC,EACDF,YAAY,CACb;AAED,eAAeG,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}