{"ast":null,"code":"import _defineProperty from\"C:/react/git/react/blog-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import _objectSpread from\"C:/react/git/react/blog-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _regeneratorRuntime from\"C:/react/git/react/blog-frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _slicedToArray from\"C:/react/git/react/blog-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";var _handleActions;var _marked=/*#__PURE__*/_regeneratorRuntime().mark(writeSaga);import{createAction,handleActions}from'redux-actions';import createRequestSaga,{createRequestActionTypes}from'../lib/createRequestSaga';import*as postsAPI from'../lib/api/posts';import{takeLatest}from'redux-saga/effects';var INITIALIZE='write/INITIALIZE';// 모든 내용 초기화\nvar CHANGE_FIELD='write/CHANGE_FIELD';// 특정 key 값 바꾸기\nvar _createRequestActionT=createRequestActionTypes('write/WRITE_POST'),_createRequestActionT2=_slicedToArray(_createRequestActionT,3),WRITE_POST=_createRequestActionT2[0],WRITE_POST_SUCCESS=_createRequestActionT2[1],WRITE_POST_FAILURE=_createRequestActionT2[2];// 포스트 작성\nvar _createRequestActionT3=createRequestActionTypes('write/UPDATE_POST'),_createRequestActionT4=_slicedToArray(_createRequestActionT3,3),UPDATE_POST=_createRequestActionT4[0],UPDATE_POST_SUCCESS=_createRequestActionT4[1],UPDATE_POST_FAILURE=_createRequestActionT4[2];// 포스트 수정\nvar SET_ORIGINAL_POST='write/SET_ORIGINAL_POST';export var setOriginalPost=createAction(SET_ORIGINAL_POST,function(post){return post;});export var initialize=createAction(INITIALIZE);export var changeField=createAction(CHANGE_FIELD,function(_ref){var key=_ref.key,value=_ref.value;return{key:key,value:value};});export var writePost=createAction(WRITE_POST,function(_ref2){var title=_ref2.title,body=_ref2.body,tags=_ref2.tags;return{title:title,body:body,tags:tags};});export var updatePost=createAction(UPDATE_POST,function(_ref3){var id=_ref3.id,title=_ref3.title,body=_ref3.body,tags=_ref3.tags;return{id:id,title:title,body:body,tags:tags};});// 사가 생성\nvar writePostSaga=createRequestSaga(WRITE_POST,postsAPI.writePost);var updatePostSaga=createRequestSaga(UPDATE_POST,postsAPI.updatePost);export function writeSaga(){return _regeneratorRuntime().wrap(function writeSaga$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.next=2;return takeLatest(WRITE_POST,writePostSaga);case 2:_context.next=4;return takeLatest(UPDATE_POST,updatePostSaga);case 4:case\"end\":return _context.stop();}},_marked);}var initialState={title:'',body:'',tags:[],post:null,postError:null,originalPostId:null};var write=handleActions((_handleActions={},_defineProperty(_handleActions,INITIALIZE,function(state){return initialState;}),_defineProperty(_handleActions,CHANGE_FIELD,function(state,_ref4){var _ref4$payload=_ref4.payload,key=_ref4$payload.key,value=_ref4$payload.value;return _objectSpread(_objectSpread({},state),{},_defineProperty({},key,value));}),_defineProperty(_handleActions,WRITE_POST,function(state){return _objectSpread(_objectSpread({},state),{},{// post와 postError를 초기화\npost:null,postError:null});}),_defineProperty(_handleActions,WRITE_POST_SUCCESS,function(state,_ref5){var post=_ref5.payload;return _objectSpread(_objectSpread({},state),{},{post:post});}),_defineProperty(_handleActions,WRITE_POST_FAILURE,function(state,_ref6){var postError=_ref6.payload;return _objectSpread(_objectSpread({},state),{},{postError:postError});}),_defineProperty(_handleActions,SET_ORIGINAL_POST,function(state,_ref7){var post=_ref7.payload;return _objectSpread(_objectSpread({},state),{},{title:post.title,body:post.body,tags:post.tags,originalPostId:post._id});}),_defineProperty(_handleActions,UPDATE_POST_SUCCESS,function(state,_ref8){var post=_ref8.payload;return _objectSpread(_objectSpread({},state),{},{post:post});}),_defineProperty(_handleActions,UPDATE_POST_FAILURE,function(state,_ref9){var postError=_ref9.payload;return _objectSpread(_objectSpread({},state),{},{postError:postError});}),_handleActions),initialState);export default write;","map":{"version":3,"names":["writeSaga","createAction","handleActions","createRequestSaga","createRequestActionTypes","postsAPI","takeLatest","INITIALIZE","CHANGE_FIELD","_createRequestActionT","_createRequestActionT2","_slicedToArray","WRITE_POST","WRITE_POST_SUCCESS","WRITE_POST_FAILURE","_createRequestActionT3","_createRequestActionT4","UPDATE_POST","UPDATE_POST_SUCCESS","UPDATE_POST_FAILURE","SET_ORIGINAL_POST","setOriginalPost","post","initialize","changeField","_ref","key","value","writePost","_ref2","title","body","tags","updatePost","_ref3","id","writePostSaga","updatePostSaga","_regeneratorRuntime","wrap","writeSaga$","_context","prev","next","stop","_marked","initialState","postError","originalPostId","write","_handleActions","_defineProperty","state","_ref4","_ref4$payload","payload","_objectSpread","_ref5","_ref6","_ref7","_id","_ref8","_ref9"],"sources":["C:/react/git/react/blog-frontend/src/modules/write.js"],"sourcesContent":["import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as postsAPI from '../lib/api/posts';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\nconst INITIALIZE = 'write/INITIALIZE'; // 모든 내용 초기화\r\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; // 특정 key 값 바꾸기\r\n\r\nconst [\r\n  WRITE_POST,\r\n  WRITE_POST_SUCCESS,\r\n  WRITE_POST_FAILURE,\r\n] = createRequestActionTypes('write/WRITE_POST'); // 포스트 작성\r\n\r\nconst [\r\n  UPDATE_POST,\r\n  UPDATE_POST_SUCCESS,\r\n  UPDATE_POST_FAILURE,\r\n] = createRequestActionTypes('write/UPDATE_POST'); // 포스트 수정\r\n\r\nconst SET_ORIGINAL_POST = 'write/SET_ORIGINAL_POST';\r\nexport const setOriginalPost = createAction(SET_ORIGINAL_POST, post => post)\r\nexport const initialize = createAction(INITIALIZE);\r\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\r\n  key,\r\n  value,\r\n}));\r\nexport const writePost = createAction(WRITE_POST, ({ title, body, tags }) => ({\r\n  title,\r\n  body,\r\n  tags,\r\n}));\r\n\r\n\r\n\r\n\r\nexport const updatePost = createAction(\r\n  UPDATE_POST,\r\n  ({ id, title, body, tags }) => ({\r\n    id,\r\n    title,\r\n    body,\r\n    tags,\r\n  }),\r\n);\r\n// 사가 생성\r\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost);\r\nconst updatePostSaga = createRequestSaga(UPDATE_POST, postsAPI.updatePost);\r\n\r\nexport function* writeSaga() {\r\n  yield takeLatest(WRITE_POST, writePostSaga);\r\n  yield takeLatest(UPDATE_POST, updatePostSaga);\r\n}\r\n\r\nconst initialState = {\r\n  title: '',\r\n  body: '',\r\n  tags: [],\r\n  post: null,\r\n  postError: null,\r\n  originalPostId: null,\r\n};\r\n\r\nconst write = handleActions(\r\n  {\r\n    [INITIALIZE]: state => initialState, // initialState를 넣으면 초기 상태로 바뀜\r\n    [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\r\n      ...state,\r\n      [key]: value, // 특정 key 값을 업데이트\r\n    }),\r\n    [WRITE_POST]: state => ({\r\n      ...state,\r\n      // post와 postError를 초기화\r\n      post: null,\r\n      postError: null,\r\n    }),\r\n    // 포스트 작성 성공\r\n    [WRITE_POST_SUCCESS]: (state, { payload: post }) => ({\r\n      ...state,\r\n      post,\r\n    }),\r\n    // 포스트 작성 실패\r\n    [WRITE_POST_FAILURE]: (state, { payload: postError }) => ({\r\n      ...state,\r\n      postError,\r\n    }),\r\n    [SET_ORIGINAL_POST]: (state, { payload: post }) => ({\r\n      ...state,\r\n      title: post.title,\r\n      body: post.body,\r\n      tags: post.tags,\r\n      originalPostId: post._id,\r\n    }),\r\n    [UPDATE_POST_SUCCESS]: (state, { payload: post }) => ({\r\n      ...state,\r\n      post,\r\n    }),\r\n    [UPDATE_POST_FAILURE]: (state, { payload: postError }) => ({\r\n      ...state,\r\n      postError,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default write;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}