{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\nconst [LIST_POSTS, LIST_POSTS_SUCCESS, LIST_POSTS_FAILURE] = createRequestActionTypes('posts/LIST_POSTS');\nexport const listPosts = createAction(LIST_POSTS, _ref => {\n  let {\n    tag,\n    username,\n    page\n  } = _ref;\n  return {\n    tag,\n    username,\n    page\n  };\n});\nconst listPostsSaga = createRequestSaga(LIST_POSTS, postsAPI.listPosts);\nexport function* postsSaga() {\n  yield takeLatest(LIST_POSTS, listPostsSaga);\n}\nconst initialState = {\n  posts: null,\n  error: null\n};\nconst posts = handleActions({\n  [LIST_POSTS_SUCCESS]: (state, _ref2) => {\n    let {\n      payload: posts\n    } = _ref2;\n    return {\n      ...state,\n      posts,\n      lastPage: parseInt(response.headers['last-page'], 10)\n    };\n  },\n  [LIST_POSTS_FAILURE]: (state, _ref3) => {\n    let {\n      payload: error\n    } = _ref3;\n    return {\n      ...state,\n      error\n    };\n  }\n}, initialState);\nexport default posts;","map":{"version":3,"names":["createAction","handleActions","createRequestSaga","createRequestActionTypes","postsAPI","takeLatest","LIST_POSTS","LIST_POSTS_SUCCESS","LIST_POSTS_FAILURE","listPosts","_ref","tag","username","page","listPostsSaga","postsSaga","initialState","posts","error","state","_ref2","payload","lastPage","parseInt","response","headers","_ref3"],"sources":["C:/react/git/react/blog-frontend/src/modules/posts.js"],"sourcesContent":["import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as postsAPI from '../lib/api/posts';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\nconst [\r\n  LIST_POSTS,\r\n  LIST_POSTS_SUCCESS,\r\n  LIST_POSTS_FAILURE,\r\n] = createRequestActionTypes('posts/LIST_POSTS');\r\n\r\nexport const listPosts = createAction(\r\n  LIST_POSTS,\r\n  ({ tag, username, page }) => ({ tag, username, page }),\r\n);\r\n\r\nconst listPostsSaga = createRequestSaga(LIST_POSTS, postsAPI.listPosts);\r\nexport function* postsSaga() {\r\n  yield takeLatest(LIST_POSTS, listPostsSaga);\r\n}\r\n\r\nconst initialState = {\r\n  posts: null,\r\n  error: null,\r\n \r\n};\r\n\r\nconst posts = handleActions(\r\n  {\r\n    [LIST_POSTS_SUCCESS]: (state, { payload: posts }) => ({\r\n      ...state,\r\n      posts,\r\n      lastPage: parseInt(response.headers['last-page'], 10),\r\n    }),\r\n    [LIST_POSTS_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default posts;"],"mappings":"AAAA,SAASA,YAAY,EAAEC,aAAa,QAAQ,eAAe;AAC3D,OAAOC,iBAAiB,IACtBC,wBAAwB,QACnB,0BAA0B;AACjC,OAAO,KAAKC,QAAQ,MAAM,kBAAkB;AAC5C,SAASC,UAAU,QAAQ,oBAAoB;AAE/C,MAAM,CACJC,UAAU,EACVC,kBAAkB,EAClBC,kBAAkB,CACnB,GAAGL,wBAAwB,CAAC,kBAAkB,CAAC;AAEhD,OAAO,MAAMM,SAAS,GAAGT,YAAY,CACnCM,UAAU,EACVI,IAAA;EAAA,IAAC;IAAEC,GAAG;IAAEC,QAAQ;IAAEC;EAAK,CAAC,GAAAH,IAAA;EAAA,OAAM;IAAEC,GAAG;IAAEC,QAAQ;IAAEC;EAAK,CAAC;AAAA,CAAC,CACvD;AAED,MAAMC,aAAa,GAAGZ,iBAAiB,CAACI,UAAU,EAAEF,QAAQ,CAACK,SAAS,CAAC;AACvE,OAAO,UAAUM,SAASA,CAAA,EAAG;EAC3B,MAAMV,UAAU,CAACC,UAAU,EAAEQ,aAAa,CAAC;AAC7C;AAEA,MAAME,YAAY,GAAG;EACnBC,KAAK,EAAE,IAAI;EACXC,KAAK,EAAE;AAET,CAAC;AAED,MAAMD,KAAK,GAAGhB,aAAa,CACzB;EACE,CAACM,kBAAkB,GAAG,CAACY,KAAK,EAAAC,KAAA;IAAA,IAAE;MAAEC,OAAO,EAAEJ;IAAM,CAAC,GAAAG,KAAA;IAAA,OAAM;MACpD,GAAGD,KAAK;MACRF,KAAK;MACLK,QAAQ,EAAEC,QAAQ,CAACC,QAAQ,CAACC,OAAO,CAAC,WAAW,CAAC,EAAE,EAAE;IACtD,CAAC;EAAA,CAAC;EACF,CAACjB,kBAAkB,GAAG,CAACW,KAAK,EAAAO,KAAA;IAAA,IAAE;MAAEL,OAAO,EAAEH;IAAM,CAAC,GAAAQ,KAAA;IAAA,OAAM;MACpD,GAAGP,KAAK;MACRD;IACF,CAAC;EAAA;AACH,CAAC,EACDF,YAAY,CACb;AAED,eAAeC,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}