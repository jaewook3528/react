{"ast":null,"code":"var _jsxFileName = \"C:\\\\react\\\\git\\\\react\\\\blog-frontend\\\\src\\\\containers\\\\post\\\\PostViewerContainer.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { readPost, unloadPost } from '../../modules/post';\nimport PostViewer from '../../components/post/PostViewer';\nimport PostActionButtons from '../../components/post/PostActionButtons';\nimport { setOriginalPost } from '../../modules/write';\nimport { removePost } from '../../lib/api/posts';\nimport CommentList from '../../components/post/CommentList';\nimport CommentInput from '../../components/post/CommentInput';\nimport { initialize, changeField } from '../../modules/comment';\nconst PostViewerContainer = _ref => {\n  _s();\n  let {\n    match,\n    history\n  } = _ref;\n  const {\n    postId\n  } = match.params;\n  const dispatch = useDispatch();\n  const {\n    post,\n    error,\n    loading,\n    user,\n    comment\n  } = useSelector(_ref2 => {\n    let {\n      post,\n      loading,\n      user,\n      comment\n    } = _ref2;\n    return {\n      post: post.post,\n      error: post.error,\n      loading: loading['post/READ_POST'],\n      user: user.user,\n      comment: comment\n    };\n  });\n  const onRemove = async () => {\n    try {\n      await removePost(postId);\n      history.push('/'); // 홈으로 이동\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  useEffect(() => {\n    dispatch(readPost(postId));\n    return () => {\n      dispatch(unloadPost());\n      dispatch(initialize());\n    };\n  }, [dispatch, postId]);\n  const onEdit = () => {\n    dispatch(setOriginalPost(post));\n    history.push('/write');\n  };\n  const onSubmitComment = e => {\n    e.preventDefault();\n    const {\n      contents\n    } = comment;\n\n    // Make sure the comment is not empty\n    if (!contents) {\n      alert('Please enter a comment.');\n      return;\n    }\n\n    // Submit the comment to the server\n    const data = {\n      postId,\n      contents\n    };\n    try {\n      writeComment(data);\n      //await writeComment(data);\n      //dispatch(readPost(postId));\n      //dispatch(initialize());\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  const onChangeCommentField = e => {\n    const {\n      value\n    } = e.target;\n    dispatch(changeField({\n      key: 'contents',\n      value\n    }));\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(PostViewer, {\n    post: post,\n    loading: loading,\n    error: error,\n    actionButtons: /*#__PURE__*/React.createElement(PostActionButtons, {\n      onEdit: onEdit,\n      onRemove: onRemove,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 22\n      }\n    }),\n    ownPost: user && user.id === post && post.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(CommentList, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(CommentInput, {\n    comment: comment,\n    onSubmitComment: onSubmitComment,\n    onChangeComment: onChangeCommentField,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }));\n};\n_s(PostViewerContainer, \"Fj2VsAHdYhDABwqj/9ntiZfZapU=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = PostViewerContainer;\nexport default _c2 = withRouter(PostViewerContainer);\nvar _c, _c2;\n$RefreshReg$(_c, \"PostViewerContainer\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useEffect","useDispatch","useSelector","withRouter","readPost","unloadPost","PostViewer","PostActionButtons","setOriginalPost","removePost","CommentList","CommentInput","initialize","changeField","PostViewerContainer","_ref","_s","match","history","postId","params","dispatch","post","error","loading","user","comment","_ref2","onRemove","push","e","console","log","onEdit","onSubmitComment","preventDefault","contents","alert","data","writeComment","onChangeCommentField","value","target","key","createElement","Fragment","actionButtons","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","ownPost","id","onChangeComment","_c","_c2","$RefreshReg$"],"sources":["C:/react/git/react/blog-frontend/src/containers/post/PostViewerContainer.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { readPost, unloadPost } from '../../modules/post';\r\nimport PostViewer from '../../components/post/PostViewer';\r\nimport PostActionButtons from '../../components/post/PostActionButtons';\r\nimport { setOriginalPost } from '../../modules/write';\r\nimport { removePost } from '../../lib/api/posts';\r\nimport CommentList from '../../components/post/CommentList';\r\nimport CommentInput from '../../components/post/CommentInput';\r\nimport { initialize, changeField } from '../../modules/comment';\r\n\r\nconst PostViewerContainer = ({ match, history }) => {\r\n  const { postId } = match.params;\r\n  const dispatch = useDispatch();\r\n  const { post, error, loading, user, comment } = useSelector(({ post, loading, user, comment }) => ({\r\n    post: post.post,\r\n    error: post.error,\r\n    loading: loading['post/READ_POST'],\r\n    user: user.user,\r\n    comment: comment,\r\n  }));\r\n\r\n  const onRemove = async () => {\r\n    try {\r\n      await removePost(postId);\r\n      history.push('/'); // 홈으로 이동\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(readPost(postId));\r\n    return () => {\r\n      dispatch(unloadPost());\r\n      dispatch(initialize());\r\n    };\r\n  }, [dispatch, postId]);\r\n\r\n  const onEdit = () => {\r\n    dispatch(setOriginalPost(post));\r\n    history.push('/write');\r\n  };\r\n\r\n  const onSubmitComment = (e) => {\r\n    e.preventDefault();\r\n    const { contents } = comment;\r\n  \r\n    // Make sure the comment is not empty\r\n    if (!contents) {\r\n      alert('Please enter a comment.');\r\n      return;\r\n    }\r\n  \r\n    // Submit the comment to the server\r\n    const data = {\r\n      postId,\r\n      contents,\r\n    };\r\n    try {\r\n      writeComment(data);\r\n      //await writeComment(data);\r\n      //dispatch(readPost(postId));\r\n      //dispatch(initialize());\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n \r\n  };\r\n\r\n  const onChangeCommentField = (e) => {\r\n    const { value } = e.target;\r\n    dispatch(changeField({ key: 'contents', value }));\r\n  };\r\n\r\n  return (\r\n    <>\r\n    <PostViewer\r\n      post={post}\r\n      loading={loading}\r\n      error={error}\r\n      actionButtons={<PostActionButtons onEdit={onEdit} onRemove={onRemove} />}\r\n      ownPost={user && user.id === post && post.id}\r\n    >\r\n     \r\n      \r\n    </PostViewer>\r\n    <CommentList />\r\n    <CommentInput comment={comment} onSubmitComment={onSubmitComment} onChangeComment={onChangeCommentField} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withRouter(PostViewerContainer);"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}