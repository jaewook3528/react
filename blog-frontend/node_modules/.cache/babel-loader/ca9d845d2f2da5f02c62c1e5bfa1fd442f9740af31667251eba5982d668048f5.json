{"ast":null,"code":"var _jsxFileName = \"C:\\\\react\\\\git\\\\react\\\\blog-frontend\\\\src\\\\containers\\\\write\\\\WriteActionButtonsContainer.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport WriteActionButtons from '../../components/write/WriteActionButtons';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport { writePost, updatePost } from '../../modules/write';\nconst WriteActionButtonsContainer = _ref => {\n  _s();\n  let {\n    history\n  } = _ref;\n  const dispatch = useDispatch();\n  const {\n    title,\n    body,\n    tags,\n    post,\n    postError,\n    originalPostId\n  } = useSelector(_ref2 => {\n    let {\n      write\n    } = _ref2;\n    return {\n      title: write.title,\n      body: write.body,\n      tags: write.tags,\n      post: write.post,\n      postError: write.postError,\n      originalPostId: write.originalPostId\n    };\n  });\n\n  // 포스트 등록\n  const onPublish = () => {\n    if (originalPostId) {\n      dispatch(updatePost({\n        title,\n        body,\n        tags,\n        id: originalPostId\n      }));\n      return;\n    }\n    dispatch(writePost({\n      title,\n      body,\n      tags\n    }));\n  };\n\n  // 취소\n  const onCancel = () => {\n    history.goBack();\n  };\n\n  // 성공 혹은 실패 시 할 작업\n  useEffect(() => {\n    if (post) {\n      const {\n        _id,\n        user\n      } = post;\n      history.push(`/@${user.username}/${_id}`);\n    }\n    if (postError) {\n      console.log(postError);\n    }\n  }, [history, post, postError]);\n  return /*#__PURE__*/React.createElement(WriteActionButtons, {\n    onPublish: onPublish,\n    onCancel: onCancel,\n    isEdit: !!originalPostId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  });\n};\n_s(WriteActionButtonsContainer, \"6i2Oef7RSuRZl0tkxpNmDRqcT54=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = WriteActionButtonsContainer;\nexport default _c2 = withRouter(WriteActionButtonsContainer);\nvar _c, _c2;\n$RefreshReg$(_c, \"WriteActionButtonsContainer\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useEffect","WriteActionButtons","useSelector","useDispatch","withRouter","writePost","updatePost","WriteActionButtonsContainer","_ref","_s","history","dispatch","title","body","tags","post","postError","originalPostId","_ref2","write","onPublish","id","onCancel","goBack","_id","user","push","username","console","log","createElement","isEdit","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","_c","_c2","$RefreshReg$"],"sources":["C:/react/git/react/blog-frontend/src/containers/write/WriteActionButtonsContainer.js"],"sourcesContent":["import React, { useEffect } from 'react';\r\nimport WriteActionButtons from '../../components/write/WriteActionButtons';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { writePost, updatePost  } from '../../modules/write';\r\n\r\nconst WriteActionButtonsContainer = ({ history }) => {\r\n  const dispatch = useDispatch();\r\n  const { title, body, tags, post, postError, originalPostId } = useSelector(\r\n    ({ write }) => ({\r\n      title: write.title,\r\n      body: write.body,\r\n      tags: write.tags,\r\n      post: write.post,\r\n      postError: write.postError,\r\n      originalPostId: write.originalPostId,\r\n    }),\r\n  );\r\n\r\n  // 포스트 등록\r\n  const onPublish = () => {\r\n    if (originalPostId) {\r\n      dispatch(updatePost({ title, body, tags, id: originalPostId }));\r\n      return;\r\n    }\r\n    dispatch(\r\n      writePost({\r\n        title,\r\n        body,\r\n        tags,\r\n      }),\r\n    );\r\n  };\r\n\r\n  // 취소\r\n  const onCancel = () => {\r\n    history.goBack();\r\n  };\r\n\r\n  // 성공 혹은 실패 시 할 작업\r\n  useEffect(() => {\r\n    if (post) {\r\n      const { _id, user } = post;\r\n      history.push(`/@${user.username}/${_id}`);\r\n    }\r\n    if (postError) {\r\n      console.log(postError);\r\n    }\r\n  }, [history, post, postError]);\r\n  return (\r\n    <WriteActionButtons\r\n      onPublish={onPublish}\r\n      onCancel={onCancel}\r\n      isEdit={!!originalPostId}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(WriteActionButtonsContainer);"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,kBAAkB,MAAM,2CAA2C;AAC1E,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,SAAS,EAAEC,UAAU,QAAS,qBAAqB;AAE5D,MAAMC,2BAA2B,GAAGC,IAAA,IAAiB;EAAAC,EAAA;EAAA,IAAhB;IAAEC;EAAQ,CAAC,GAAAF,IAAA;EAC9C,MAAMG,QAAQ,GAAGR,WAAW,EAAE;EAC9B,MAAM;IAAES,KAAK;IAAEC,IAAI;IAAEC,IAAI;IAAEC,IAAI;IAAEC,SAAS;IAAEC;EAAe,CAAC,GAAGf,WAAW,CACxEgB,KAAA;IAAA,IAAC;MAAEC;IAAM,CAAC,GAAAD,KAAA;IAAA,OAAM;MACdN,KAAK,EAAEO,KAAK,CAACP,KAAK;MAClBC,IAAI,EAAEM,KAAK,CAACN,IAAI;MAChBC,IAAI,EAAEK,KAAK,CAACL,IAAI;MAChBC,IAAI,EAAEI,KAAK,CAACJ,IAAI;MAChBC,SAAS,EAAEG,KAAK,CAACH,SAAS;MAC1BC,cAAc,EAAEE,KAAK,CAACF;IACxB,CAAC;EAAA,CAAC,CACH;;EAED;EACA,MAAMG,SAAS,GAAGA,CAAA,KAAM;IACtB,IAAIH,cAAc,EAAE;MAClBN,QAAQ,CAACL,UAAU,CAAC;QAAEM,KAAK;QAAEC,IAAI;QAAEC,IAAI;QAAEO,EAAE,EAAEJ;MAAe,CAAC,CAAC,CAAC;MAC/D;IACF;IACAN,QAAQ,CACNN,SAAS,CAAC;MACRO,KAAK;MACLC,IAAI;MACJC;IACF,CAAC,CAAC,CACH;EACH,CAAC;;EAED;EACA,MAAMQ,QAAQ,GAAGA,CAAA,KAAM;IACrBZ,OAAO,CAACa,MAAM,EAAE;EAClB,CAAC;;EAED;EACAvB,SAAS,CAAC,MAAM;IACd,IAAIe,IAAI,EAAE;MACR,MAAM;QAAES,GAAG;QAAEC;MAAK,CAAC,GAAGV,IAAI;MAC1BL,OAAO,CAACgB,IAAI,CAAE,KAAID,IAAI,CAACE,QAAS,IAAGH,GAAI,EAAC,CAAC;IAC3C;IACA,IAAIR,SAAS,EAAE;MACbY,OAAO,CAACC,GAAG,CAACb,SAAS,CAAC;IACxB;EACF,CAAC,EAAE,CAACN,OAAO,EAAEK,IAAI,EAAEC,SAAS,CAAC,CAAC;EAC9B,oBACEjB,KAAA,CAAA+B,aAAA,CAAC7B,kBAAkB;IACjBmB,SAAS,EAAEA,SAAU;IACrBE,QAAQ,EAAEA,QAAS;IACnBS,MAAM,EAAE,CAAC,CAACd,cAAe;IAAAe,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,EACzB;AAEN,CAAC;AAAC5B,EAAA,CAlDIF,2BAA2B;EAAA,QACdJ,WAAW,EACmCD,WAAW;AAAA;AAAAoC,EAAA,GAFtE/B,2BAA2B;AAoDjC,eAAAgC,GAAA,GAAenC,UAAU,CAACG,2BAA2B,CAAC;AAAC,IAAA+B,EAAA,EAAAC,GAAA;AAAAC,YAAA,CAAAF,EAAA;AAAAE,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}