{"ast":null,"code":"import _defineProperty from\"C:/react/git/react/blog-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import _objectSpread from\"C:/react/git/react/blog-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _regeneratorRuntime from\"C:/react/git/react/blog-frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _slicedToArray from\"C:/react/git/react/blog-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";var _handleActions;var _marked=/*#__PURE__*/_regeneratorRuntime().mark(postsSaga);import{createAction,handleActions}from'redux-actions';import createRequestSaga,{createRequestActionTypes}from'../lib/createRequestSaga';import*as postsAPI from'../lib/api/posts';import{takeLatest}from'redux-saga/effects';var _createRequestActionT=createRequestActionTypes('posts/LIST_POSTS'),_createRequestActionT2=_slicedToArray(_createRequestActionT,3),LIST_POSTS=_createRequestActionT2[0],LIST_POSTS_SUCCESS=_createRequestActionT2[1],LIST_POSTS_FAILURE=_createRequestActionT2[2];export var listPosts=createAction(LIST_POSTS,function(_ref){var tag=_ref.tag,username=_ref.username,page=_ref.page;return{tag:tag,username:username,page:page};});var listPostsSaga=createRequestSaga(LIST_POSTS,postsAPI.listPosts);export function postsSaga(){return _regeneratorRuntime().wrap(function postsSaga$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.next=2;return takeLatest(LIST_POSTS,listPostsSaga);case 2:case\"end\":return _context.stop();}},_marked);}var initialState={posts:null,error:null,lastPage:1};var posts=handleActions((_handleActions={},_defineProperty(_handleActions,LIST_POSTS_SUCCESS,function(state,_ref2){var posts=_ref2.payload,response=_ref2.meta;return _objectSpread(_objectSpread({},state),{},{posts:posts,lastPage:parseInt(response.headers['last-page'],10)// 문자열을 숫자로 변환\n});}),_defineProperty(_handleActions,LIST_POSTS_FAILURE,function(state,_ref3){var error=_ref3.payload;return _objectSpread(_objectSpread({},state),{},{error:error});}),_handleActions),initialState);export default posts;","map":{"version":3,"names":["postsSaga","createAction","handleActions","createRequestSaga","createRequestActionTypes","postsAPI","takeLatest","_createRequestActionT","_createRequestActionT2","_slicedToArray","LIST_POSTS","LIST_POSTS_SUCCESS","LIST_POSTS_FAILURE","listPosts","_ref","tag","username","page","listPostsSaga","_regeneratorRuntime","wrap","postsSaga$","_context","prev","next","stop","_marked","initialState","posts","error","lastPage","_handleActions","_defineProperty","state","_ref2","payload","response","meta","_objectSpread","parseInt","headers","_ref3"],"sources":["C:/react/git/react/blog-frontend/src/modules/posts.js"],"sourcesContent":["import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as postsAPI from '../lib/api/posts';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\nconst [\r\n  LIST_POSTS,\r\n  LIST_POSTS_SUCCESS,\r\n  LIST_POSTS_FAILURE,\r\n] = createRequestActionTypes('posts/LIST_POSTS');\r\n\r\nexport const listPosts = createAction(\r\n  LIST_POSTS,\r\n  ({ tag, username, page }) => ({ tag, username, page }),\r\n);\r\n\r\nconst listPostsSaga = createRequestSaga(LIST_POSTS, postsAPI.listPosts);\r\nexport function* postsSaga() {\r\n  yield takeLatest(LIST_POSTS, listPostsSaga);\r\n}\r\n\r\nconst initialState = {\r\n    posts: null,\r\n    error: null,\r\n    lastPage: 1,\r\n  };\r\n\r\n  const posts = handleActions(\r\n    {\r\n      [LIST_POSTS_SUCCESS]: (state, { payload: posts, meta: response }) => ({\r\n        ...state,\r\n        posts,\r\n        lastPage: parseInt(response.headers['last-page'], 10), // 문자열을 숫자로 변환\r\n      }),\r\n      [LIST_POSTS_FAILURE]: (state, { payload: error }) => ({\r\n        ...state,\r\n        error,\r\n      }),\r\n    },\r\n    initialState,\r\n  );\r\n\r\nexport default posts;"],"mappings":"0iBAmBiBA,SAAS,EAnB1B,OAASC,YAAY,CAAEC,aAAa,KAAQ,eAAe,CAC3D,MAAO,CAAAC,iBAAiB,EACtBC,wBAAwB,KACnB,0BAA0B,CACjC,MAAO,GAAK,CAAAC,QAAQ,KAAM,kBAAkB,CAC5C,OAASC,UAAU,KAAQ,oBAAoB,CAE/C,IAAAC,qBAAA,CAIIH,wBAAwB,CAAC,kBAAkB,CAAC,CAAAI,sBAAA,CAAAC,cAAA,CAAAF,qBAAA,IAH9CG,UAAU,CAAAF,sBAAA,IACVG,kBAAkB,CAAAH,sBAAA,IAClBI,kBAAkB,CAAAJ,sBAAA,IAGpB,MAAO,IAAM,CAAAK,SAAS,CAAGZ,YAAY,CACnCS,UAAU,CACV,SAAAI,IAAA,KAAG,CAAAC,GAAG,CAAAD,IAAA,CAAHC,GAAG,CAAEC,QAAQ,CAAAF,IAAA,CAARE,QAAQ,CAAEC,IAAI,CAAAH,IAAA,CAAJG,IAAI,OAAQ,CAAEF,GAAG,CAAHA,GAAG,CAAEC,QAAQ,CAARA,QAAQ,CAAEC,IAAI,CAAJA,IAAK,CAAC,EAAC,CACvD,CAED,GAAM,CAAAC,aAAa,CAAGf,iBAAiB,CAACO,UAAU,CAAEL,QAAQ,CAACQ,SAAS,CAAC,CACvE,MAAO,SAAU,CAAAb,SAASA,CAAA,SAAAmB,mBAAA,GAAAC,IAAA,UAAAC,WAAAC,QAAA,iBAAAA,QAAA,CAAAC,IAAA,CAAAD,QAAA,CAAAE,IAAA,SAAAF,QAAA,CAAAE,IAAA,GACxB,MAAM,CAAAlB,UAAU,CAACI,UAAU,CAAEQ,aAAa,CAAC,yBAAAI,QAAA,CAAAG,IAAA,MAAAC,OAAA,GAG7C,GAAM,CAAAC,YAAY,CAAG,CACjBC,KAAK,CAAE,IAAI,CACXC,KAAK,CAAE,IAAI,CACXC,QAAQ,CAAE,CACZ,CAAC,CAED,GAAM,CAAAF,KAAK,CAAG1B,aAAa,EAAA6B,cAAA,IAAAC,eAAA,CAAAD,cAAA,CAEtBpB,kBAAkB,CAAG,SAACsB,KAAK,CAAAC,KAAA,KAAa,CAAAN,KAAK,CAAAM,KAAA,CAAdC,OAAO,CAAeC,QAAQ,CAAAF,KAAA,CAAdG,IAAI,QAAAC,aAAA,CAAAA,aAAA,IAC/CL,KAAK,MACRL,KAAK,CAALA,KAAK,CACLE,QAAQ,CAAES,QAAQ,CAACH,QAAQ,CAACI,OAAO,CAAC,WAAW,CAAC,CAAE,EAAE,CAAG;AAAA,IACvD,EAAAR,eAAA,CAAAD,cAAA,CACDnB,kBAAkB,CAAG,SAACqB,KAAK,CAAAQ,KAAA,KAAa,CAAAZ,KAAK,CAAAY,KAAA,CAAdN,OAAO,QAAAG,aAAA,CAAAA,aAAA,IAClCL,KAAK,MACRJ,KAAK,CAALA,KAAK,IACL,EAAAE,cAAA,EAEJJ,YAAY,CACb,CAEH,cAAe,CAAAC,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}