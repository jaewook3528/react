{"ast":null,"code":"var _jsxFileName = \"C:\\\\react\\\\project\\\\blog-frontend\\\\src\\\\containers\\\\auth\\\\RegisterForm.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeField, initializeForm, register } from '../../modules/auth';\nimport AuthForm from '../../components/auth/AuthForm';\nimport { check } from '../../modules/user';\nimport { withRouter } from 'react-router-dom';\nconst RegisterForm = _ref => {\n  _s();\n  let {\n    history\n  } = _ref;\n  const [error, setError] = useState(null);\n  const dispatch = useDispatch();\n  const {\n    form,\n    auth,\n    authError,\n    user\n  } = useSelector(_ref2 => {\n    let {\n      auth,\n      user\n    } = _ref2;\n    return {\n      form: auth.register,\n      auth: auth.auth,\n      authError: auth.authError,\n      user: user.user\n    };\n  });\n  // 인풋 변경 이벤트 핸들러\n  const onChange = e => {\n    const {\n      value,\n      name\n    } = e.target;\n    dispatch(changeField({\n      form: 'register',\n      key: name,\n      value\n    }));\n  };\n\n  // 폼 등록 이벤트 핸들러\n  const onSubmit = e => {\n    e.preventDefault();\n    const {\n      username,\n      password,\n      passwordConfirm\n    } = form;\n    // 하나라도 비어 있다면\n    if ([username, password, passwordConfirm].includes('')) {\n      setError('빈 칸을 모두 입력하세요.');\n      return;\n    }\n    // 비밀번호가 일치하지 않는다면\n    if (password !== passwordConfirm) {\n      setError('비밀번호가 일치하지 않습니다.');\n      changeField({\n        form: 'register',\n        key: 'password',\n        value: ''\n      });\n      changeField({\n        form: 'register',\n        key: 'passwordConfirm',\n        value: ''\n      });\n      return;\n    }\n    dispatch(register({\n      username,\n      password\n    }));\n  };\n\n  // 컴포넌트가 처음 렌더링될 때 form을 초기화함\n  useEffect(() => {\n    dispatch(initializeForm('register'));\n  }, [dispatch]);\n\n  // 회원가입 성공/실패 처리\n  useEffect(() => {\n    if (authError) {\n      // 계정명이 이미 존재할 때\n      if (authError.response.status === 409) {\n        setError('이미 존재하는 계정명입니다.');\n        return;\n      }\n      // 기타 이유\n      setError('회원가입 실패');\n      return;\n    }\n    if (auth) {\n      console.log('회원가입 성공');\n      console.log(auth);\n      dispatch(check());\n    }\n  }, [auth, authError, dispatch]);\n\n  // user 값이 잘 설정되었는지 확인\n  useEffect(() => {\n    if (user) {\n      console.log('check API 성공');\n      console.log(user);\n      history.push('/'); // 홈 화면으로 이동\n    }\n  }, [history, user]);\n  return /*#__PURE__*/React.createElement(AuthForm, {\n    type: \"register\",\n    form: form,\n    onChange: onChange,\n    onSubmit: onSubmit,\n    error: error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  });\n};\n_s(RegisterForm, \"EM9tAJDAw+2iA3Av+vVIkPYU5Yo=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = RegisterForm;\nexport default _c2 = withRouter(RegisterForm);\nvar _c, _c2;\n$RefreshReg$(_c, \"RegisterForm\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","changeField","initializeForm","register","AuthForm","check","withRouter","RegisterForm","_ref","_s","history","error","setError","dispatch","form","auth","authError","user","_ref2","onChange","e","value","name","target","key","onSubmit","preventDefault","username","password","passwordConfirm","includes","response","status","console","log","push","createElement","type","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","_c","_c2","$RefreshReg$"],"sources":["C:/react/project/blog-frontend/src/containers/auth/RegisterForm.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changeField, initializeForm, register } from '../../modules/auth';\r\nimport AuthForm from '../../components/auth/AuthForm';\r\nimport { check } from '../../modules/user';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nconst RegisterForm = ({ history }) => {\r\n    const [error, setError] = useState(null);\r\n    const dispatch = useDispatch();\r\n    const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\r\n        form: auth.register,\r\n        auth: auth.auth,\r\n        authError: auth.authError,\r\n        user: user.user\r\n      }));\r\n  // 인풋 변경 이벤트 핸들러\r\n  const onChange = e => {\r\n    const { value, name } = e.target;\r\n    dispatch(\r\n      changeField({\r\n        form: 'register',\r\n        key: name,\r\n        value\r\n      })\r\n    );\r\n  };\r\n\r\n  // 폼 등록 이벤트 핸들러\r\n  const onSubmit = e => {\r\n    e.preventDefault();\r\n    const { username, password, passwordConfirm } = form;\r\n    // 하나라도 비어 있다면\r\n    if ([username, password, passwordConfirm].includes('')) {\r\n      setError('빈 칸을 모두 입력하세요.');\r\n      return;\r\n    }\r\n    // 비밀번호가 일치하지 않는다면\r\n    if (password !== passwordConfirm) {\r\n      setError('비밀번호가 일치하지 않습니다.');\r\n      changeField({ form: 'register', key: 'password', value: '' });\r\n      changeField({ form: 'register', key: 'passwordConfirm', value: '' });\r\n      return;\r\n    }\r\n    dispatch(register({ username, password }));\r\n  };\r\n\r\n  // 컴포넌트가 처음 렌더링될 때 form을 초기화함\r\n  useEffect(() => {\r\n    dispatch(initializeForm('register'));\r\n  }, [dispatch]);\r\n\r\n  // 회원가입 성공/실패 처리\r\n  useEffect(() => {\r\n    if (authError) {\r\n      // 계정명이 이미 존재할 때\r\n      if (authError.response.status === 409) {\r\n        setError('이미 존재하는 계정명입니다.');\r\n        return;\r\n      }\r\n      // 기타 이유\r\n      setError('회원가입 실패');\r\n      return;\r\n    }\r\n\r\n    if (auth) {\r\n      console.log('회원가입 성공');\r\n      console.log(auth);\r\n      dispatch(check());\r\n    }\r\n  }, [auth, authError, dispatch]);\r\n\r\n    // user 값이 잘 설정되었는지 확인\r\n    useEffect(() => {\r\n        if (user) {\r\n          console.log('check API 성공');\r\n          console.log(user);\r\n          history.push('/'); // 홈 화면으로 이동\r\n        }\r\n      }, [history, user]);\r\n\r\n\r\n  return (\r\n    <AuthForm\r\n      type=\"register\"\r\n      form={form}\r\n      onChange={onChange}\r\n      onSubmit={onSubmit}\r\n      error={error}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(RegisterForm);"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}