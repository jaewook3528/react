{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport * as postsAPI from '../lib/api/posts';\nimport { takeLatest } from 'redux-saga/effects';\nconst INITIALIZE = 'write/INITIALIZE'; // 모든 내용 초기화\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; // 특정 key 값 바꾸기\n\nconst [WRITE_POST, WRITE_POST_SUCCESS, WRITE_POST_FAILURE] = createRequestActionTypes('write/WRITE_POST'); // 포스트 작성\n\nconst [UPDATE_POST, UPDATE_POST_SUCCESS, UPDATE_POST_FAILURE] = createRequestActionTypes('write/UPDATE_POST'); // 포스트 수정\n\nconst SET_ORIGINAL_POST = 'write/SET_ORIGINAL_POST';\nexport const setOriginalPost = createAction(SET_ORIGINAL_POST, post => post);\nexport const initialize = createAction(INITIALIZE);\nexport const changeField = createAction(CHANGE_FIELD, _ref => {\n  let {\n    key,\n    value\n  } = _ref;\n  return {\n    key,\n    value\n  };\n});\nexport const writePost = createAction(WRITE_POST, _ref2 => {\n  let {\n    title,\n    body,\n    tags\n  } = _ref2;\n  return {\n    title,\n    body,\n    tags\n  };\n});\nexport const updatePost = createAction(UPDATE_POST, _ref3 => {\n  let {\n    id,\n    title,\n    body,\n    tags\n  } = _ref3;\n  return {\n    id,\n    title,\n    body,\n    tags\n  };\n});\n// 사가 생성\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost);\nconst updatePostSaga = createRequestSaga(UPDATE_POST, postsAPI.updatePost);\nexport function* writeSaga() {\n  yield takeLatest(WRITE_POST, writePostSaga);\n  yield takeLatest(UPDATE_POST, updatePostSaga);\n}\nconst initialState = {\n  title: '',\n  body: '',\n  tags: [],\n  post: null,\n  postError: null,\n  originalPostId: null\n};\nconst write = handleActions({\n  [INITIALIZE]: state => initialState,\n  // initialState를 넣으면 초기 상태로 바뀜\n  [CHANGE_FIELD]: (state, _ref4) => {\n    let {\n      payload: {\n        key,\n        value\n      }\n    } = _ref4;\n    return {\n      ...state,\n      [key]: value // 특정 key 값을 업데이트\n    };\n  },\n\n  [WRITE_POST]: state => ({\n    ...state,\n    // post와 postError를 초기화\n    post: null,\n    postError: null\n  }),\n  // 포스트 작성 성공\n  [WRITE_POST_SUCCESS]: (state, _ref5) => {\n    let {\n      payload: post\n    } = _ref5;\n    return {\n      ...state,\n      post\n    };\n  },\n  // 포스트 작성 실패\n  [WRITE_POST_FAILURE]: (state, _ref6) => {\n    let {\n      payload: postError\n    } = _ref6;\n    return {\n      ...state,\n      postError\n    };\n  },\n  [SET_ORIGINAL_POST]: (state, _ref7) => {\n    let {\n      payload: post\n    } = _ref7;\n    return {\n      ...state,\n      title: post.title,\n      body: post.body,\n      tags: post.tags,\n      originalPostId: post._id\n    };\n  },\n  [UPDATE_POST_SUCCESS]: (state, _ref8) => {\n    let {\n      payload: post\n    } = _ref8;\n    return {\n      ...state,\n      post\n    };\n  },\n  [UPDATE_POST_FAILURE]: (state, _ref9) => {\n    let {\n      payload: postError\n    } = _ref9;\n    return {\n      ...state,\n      postError\n    };\n  }\n}, initialState);\nexport default write;","map":{"version":3,"names":["createAction","handleActions","createRequestSaga","createRequestActionTypes","postsAPI","takeLatest","INITIALIZE","CHANGE_FIELD","WRITE_POST","WRITE_POST_SUCCESS","WRITE_POST_FAILURE","UPDATE_POST","UPDATE_POST_SUCCESS","UPDATE_POST_FAILURE","SET_ORIGINAL_POST","setOriginalPost","post","initialize","changeField","_ref","key","value","writePost","_ref2","title","body","tags","updatePost","_ref3","id","writePostSaga","updatePostSaga","writeSaga","initialState","postError","originalPostId","write","state","_ref4","payload","_ref5","_ref6","_ref7","_id","_ref8","_ref9"],"sources":["C:/react/git/react/blog-frontend/src/modules/write.js"],"sourcesContent":["import { createAction, handleActions } from 'redux-actions';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport * as postsAPI from '../lib/api/posts';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\nconst INITIALIZE = 'write/INITIALIZE'; // 모든 내용 초기화\r\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; // 특정 key 값 바꾸기\r\n\r\nconst [\r\n  WRITE_POST,\r\n  WRITE_POST_SUCCESS,\r\n  WRITE_POST_FAILURE,\r\n] = createRequestActionTypes('write/WRITE_POST'); // 포스트 작성\r\n\r\nconst [\r\n  UPDATE_POST,\r\n  UPDATE_POST_SUCCESS,\r\n  UPDATE_POST_FAILURE,\r\n] = createRequestActionTypes('write/UPDATE_POST'); // 포스트 수정\r\n\r\nconst SET_ORIGINAL_POST = 'write/SET_ORIGINAL_POST';\r\nexport const setOriginalPost = createAction(SET_ORIGINAL_POST, post => post)\r\nexport const initialize = createAction(INITIALIZE);\r\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\r\n  key,\r\n  value,\r\n}));\r\nexport const writePost = createAction(WRITE_POST, ({ title, body, tags }) => ({\r\n  title,\r\n  body,\r\n  tags,\r\n}));\r\n\r\n\r\n\r\n\r\nexport const updatePost = createAction(\r\n  \r\n  UPDATE_POST,\r\n  ({ id, title, body, tags }) => ({\r\n    id,\r\n    title,\r\n    body,\r\n    tags,\r\n  }),\r\n);\r\n// 사가 생성\r\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost);\r\nconst updatePostSaga = createRequestSaga(UPDATE_POST, postsAPI.updatePost);\r\n\r\nexport function* writeSaga() {\r\n  yield takeLatest(WRITE_POST, writePostSaga);\r\n  yield takeLatest(UPDATE_POST, updatePostSaga);\r\n}\r\n\r\nconst initialState = {\r\n  title: '',\r\n  body: '',\r\n  tags: [],\r\n  post: null,\r\n  postError: null,\r\n  originalPostId: null,\r\n};\r\n\r\nconst write = handleActions(\r\n  {\r\n    [INITIALIZE]: state => initialState, // initialState를 넣으면 초기 상태로 바뀜\r\n    [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\r\n      ...state,\r\n      [key]: value, // 특정 key 값을 업데이트\r\n    }),\r\n    [WRITE_POST]: state => ({\r\n      ...state,\r\n      // post와 postError를 초기화\r\n      post: null,\r\n      postError: null,\r\n    }),\r\n    // 포스트 작성 성공\r\n    [WRITE_POST_SUCCESS]: (state, { payload: post }) => ({\r\n      ...state,\r\n      post,\r\n    }),\r\n    // 포스트 작성 실패\r\n    [WRITE_POST_FAILURE]: (state, { payload: postError }) => ({\r\n      ...state,\r\n      postError,\r\n    }),\r\n    [SET_ORIGINAL_POST]: (state, { payload: post }) => ({\r\n      ...state,\r\n      title: post.title,\r\n      body: post.body,\r\n      tags: post.tags,\r\n      originalPostId: post._id,\r\n    }),\r\n    [UPDATE_POST_SUCCESS]: (state, { payload: post }) => ({\r\n      \r\n      ...state,\r\n      post,\r\n    }),\r\n    [UPDATE_POST_FAILURE]: (state, { payload: postError }) => ({\r\n      ...state,\r\n      postError,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default write;"],"mappings":"AAAA,SAASA,YAAY,EAAEC,aAAa,QAAQ,eAAe;AAC3D,OAAOC,iBAAiB,IACtBC,wBAAwB,QACnB,0BAA0B;AACjC,OAAO,KAAKC,QAAQ,MAAM,kBAAkB;AAC5C,SAASC,UAAU,QAAQ,oBAAoB;AAE/C,MAAMC,UAAU,GAAG,kBAAkB,CAAC,CAAC;AACvC,MAAMC,YAAY,GAAG,oBAAoB,CAAC,CAAC;;AAE3C,MAAM,CACJC,UAAU,EACVC,kBAAkB,EAClBC,kBAAkB,CACnB,GAAGP,wBAAwB,CAAC,kBAAkB,CAAC,CAAC,CAAC;;AAElD,MAAM,CACJQ,WAAW,EACXC,mBAAmB,EACnBC,mBAAmB,CACpB,GAAGV,wBAAwB,CAAC,mBAAmB,CAAC,CAAC,CAAC;;AAEnD,MAAMW,iBAAiB,GAAG,yBAAyB;AACnD,OAAO,MAAMC,eAAe,GAAGf,YAAY,CAACc,iBAAiB,EAAEE,IAAI,IAAIA,IAAI,CAAC;AAC5E,OAAO,MAAMC,UAAU,GAAGjB,YAAY,CAACM,UAAU,CAAC;AAClD,OAAO,MAAMY,WAAW,GAAGlB,YAAY,CAACO,YAAY,EAAEY,IAAA;EAAA,IAAC;IAAEC,GAAG;IAAEC;EAAM,CAAC,GAAAF,IAAA;EAAA,OAAM;IACzEC,GAAG;IACHC;EACF,CAAC;AAAA,CAAC,CAAC;AACH,OAAO,MAAMC,SAAS,GAAGtB,YAAY,CAACQ,UAAU,EAAEe,KAAA;EAAA,IAAC;IAAEC,KAAK;IAAEC,IAAI;IAAEC;EAAK,CAAC,GAAAH,KAAA;EAAA,OAAM;IAC5EC,KAAK;IACLC,IAAI;IACJC;EACF,CAAC;AAAA,CAAC,CAAC;AAKH,OAAO,MAAMC,UAAU,GAAG3B,YAAY,CAEpCW,WAAW,EACXiB,KAAA;EAAA,IAAC;IAAEC,EAAE;IAAEL,KAAK;IAAEC,IAAI;IAAEC;EAAK,CAAC,GAAAE,KAAA;EAAA,OAAM;IAC9BC,EAAE;IACFL,KAAK;IACLC,IAAI;IACJC;EACF,CAAC;AAAA,CAAC,CACH;AACD;AACA,MAAMI,aAAa,GAAG5B,iBAAiB,CAACM,UAAU,EAAEJ,QAAQ,CAACkB,SAAS,CAAC;AACvE,MAAMS,cAAc,GAAG7B,iBAAiB,CAACS,WAAW,EAAEP,QAAQ,CAACuB,UAAU,CAAC;AAE1E,OAAO,UAAUK,SAASA,CAAA,EAAG;EAC3B,MAAM3B,UAAU,CAACG,UAAU,EAAEsB,aAAa,CAAC;EAC3C,MAAMzB,UAAU,CAACM,WAAW,EAAEoB,cAAc,CAAC;AAC/C;AAEA,MAAME,YAAY,GAAG;EACnBT,KAAK,EAAE,EAAE;EACTC,IAAI,EAAE,EAAE;EACRC,IAAI,EAAE,EAAE;EACRV,IAAI,EAAE,IAAI;EACVkB,SAAS,EAAE,IAAI;EACfC,cAAc,EAAE;AAClB,CAAC;AAED,MAAMC,KAAK,GAAGnC,aAAa,CACzB;EACE,CAACK,UAAU,GAAG+B,KAAK,IAAIJ,YAAY;EAAE;EACrC,CAAC1B,YAAY,GAAG,CAAC8B,KAAK,EAAAC,KAAA;IAAA,IAAE;MAAEC,OAAO,EAAE;QAAEnB,GAAG;QAAEC;MAAM;IAAE,CAAC,GAAAiB,KAAA;IAAA,OAAM;MACvD,GAAGD,KAAK;MACR,CAACjB,GAAG,GAAGC,KAAK,CAAE;IAChB,CAAC;EAAA,CAAC;;EACF,CAACb,UAAU,GAAG6B,KAAK,KAAK;IACtB,GAAGA,KAAK;IACR;IACArB,IAAI,EAAE,IAAI;IACVkB,SAAS,EAAE;EACb,CAAC,CAAC;EACF;EACA,CAACzB,kBAAkB,GAAG,CAAC4B,KAAK,EAAAG,KAAA;IAAA,IAAE;MAAED,OAAO,EAAEvB;IAAK,CAAC,GAAAwB,KAAA;IAAA,OAAM;MACnD,GAAGH,KAAK;MACRrB;IACF,CAAC;EAAA,CAAC;EACF;EACA,CAACN,kBAAkB,GAAG,CAAC2B,KAAK,EAAAI,KAAA;IAAA,IAAE;MAAEF,OAAO,EAAEL;IAAU,CAAC,GAAAO,KAAA;IAAA,OAAM;MACxD,GAAGJ,KAAK;MACRH;IACF,CAAC;EAAA,CAAC;EACF,CAACpB,iBAAiB,GAAG,CAACuB,KAAK,EAAAK,KAAA;IAAA,IAAE;MAAEH,OAAO,EAAEvB;IAAK,CAAC,GAAA0B,KAAA;IAAA,OAAM;MAClD,GAAGL,KAAK;MACRb,KAAK,EAAER,IAAI,CAACQ,KAAK;MACjBC,IAAI,EAAET,IAAI,CAACS,IAAI;MACfC,IAAI,EAAEV,IAAI,CAACU,IAAI;MACfS,cAAc,EAAEnB,IAAI,CAAC2B;IACvB,CAAC;EAAA,CAAC;EACF,CAAC/B,mBAAmB,GAAG,CAACyB,KAAK,EAAAO,KAAA;IAAA,IAAE;MAAEL,OAAO,EAAEvB;IAAK,CAAC,GAAA4B,KAAA;IAAA,OAAM;MAEpD,GAAGP,KAAK;MACRrB;IACF,CAAC;EAAA,CAAC;EACF,CAACH,mBAAmB,GAAG,CAACwB,KAAK,EAAAQ,KAAA;IAAA,IAAE;MAAEN,OAAO,EAAEL;IAAU,CAAC,GAAAW,KAAA;IAAA,OAAM;MACzD,GAAGR,KAAK;MACRH;IACF,CAAC;EAAA;AACH,CAAC,EACDD,YAAY,CACb;AAED,eAAeG,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}